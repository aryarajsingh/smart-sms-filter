plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
    id 'kotlin-parcelize'
}

android {
    namespace 'com.smartsmsfilter'
    compileSdk rootProject.compileSdk

    signingConfigs {
        release {
            def keystorePropertiesFile = rootProject.file('keystore.properties')
            if (keystorePropertiesFile.exists()) {
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                storeFile rootProject.file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                
                println "Release signing configuration loaded: ${keystoreProperties['storeFile']}"
            } else {
                throw new GradleException("keystore.properties file not found for release signing")
            }
        }
    }

    defaultConfig {
        applicationId "com.smartsmsfilter"
        minSdk rootProject.minSdk
        targetSdk rootProject.targetSdk
        versionCode 9  // UX Enhancements and System Improvements
        versionName "1.4.0" // UX Enhancements and System Improvements

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        
        // Support all CPU architectures
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }

        // TensorFlow Lite model configuration
        aaptOptions {
            noCompress "tflite"
        }
    }

    // Product flavors for different classification modes
    flavorDimensions "classifier"
    productFlavors {
        classical {
            dimension "classifier"
            applicationIdSuffix ".classical"
            versionNameSuffix "-classical"
            buildConfigField "String", "CLASSIFIER_TYPE", '"CLASSICAL"'
            buildConfigField "boolean", "USE_ML_CLASSIFIER", "false"
        }
        ml {
            dimension "classifier"
            applicationIdSuffix ".ml"
            versionNameSuffix "-ml"
            buildConfigField "String", "CLASSIFIER_TYPE", '"ML"'
            buildConfigField "boolean", "USE_ML_CLASSIFIER", "true"
            buildConfigField "String", "MODEL_VERSION", '"1.0.0"'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            debuggable true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        compose true
        buildConfig true
    }

    composeOptions {
        kotlinCompilerExtensionVersion rootProject.composeVersion
    }

    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
        // Fix for duplicate files
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
    }
    
    // Generate universal APK for compatibility
    splits {
        abi {
            enable false
            universalApk true
        }
    }
}

dependencies {
    // Core Android
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:' + rootProject.lifecycleVersion
    implementation 'androidx.activity:activity-compose:1.8.0'

    // Jetpack Compose
    implementation platform('androidx.compose:compose-bom:2024.02.01')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.compose.material:material-icons-extended'
    implementation 'androidx.compose.foundation:foundation'
    
    // Navigation
    implementation 'androidx.navigation:navigation-compose:2.7.4'
    
    // ViewModel and LiveData
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:' + rootProject.lifecycleVersion
    implementation 'androidx.lifecycle:lifecycle-runtime-compose:' + rootProject.lifecycleVersion
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:' + rootProject.lifecycleVersion
    
    // Hilt Dependency Injection
    implementation 'com.google.dagger:hilt-android:' + rootProject.hiltVersion
    implementation 'androidx.hilt:hilt-navigation-compose:1.1.0'
    kapt 'com.google.dagger:hilt-compiler:' + rootProject.hiltVersion
    
    // Room Database
    implementation 'androidx.room:room-runtime:' + rootProject.roomVersion
    implementation 'androidx.room:room-ktx:' + rootProject.roomVersion
    kapt 'androidx.room:room-compiler:' + rootProject.roomVersion
    
    // DataStore for preferences
    implementation 'androidx.datastore:datastore-preferences:1.0.0'
    implementation 'androidx.datastore:datastore-core:1.0.0'
    
    // TensorFlow Lite for AI Model - Only included in ML variant
    mlImplementation 'org.tensorflow:tensorflow-lite:2.13.0'
    mlImplementation 'org.tensorflow:tensorflow-lite-support:0.4.4'
    mlImplementation 'org.tensorflow:tensorflow-lite-metadata:0.4.4'
    mlImplementation 'org.tensorflow:tensorflow-lite-gpu:2.13.0' // Optional GPU acceleration
    
    // Permissions
    implementation 'com.google.accompanist:accompanist-permissions:0.32.0'
    
    // JSON parsing
    implementation 'com.squareup.moshi:moshi:1.15.0'
    implementation 'com.squareup.moshi:moshi-kotlin:1.15.0'
    kapt 'com.squareup.moshi:moshi-kotlin-codegen:1.15.0'
    
    // Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.6.0'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:5.1.0'
    testImplementation 'io.mockk:mockk:1.13.8'
    testImplementation 'io.mockk:mockk-android:1.13.8'
    testImplementation 'io.mockk:mockk-agent:1.13.8'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
    testImplementation 'androidx.room:room-testing:' + rootProject.roomVersion
    testImplementation 'androidx.arch.core:core-testing:2.2.0'
    testImplementation 'app.cash.turbine:turbine:1.0.0'
    testImplementation 'com.google.truth:truth:1.1.5'
    testImplementation 'org.robolectric:robolectric:4.11.1'
    
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2024.02.01')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
}
